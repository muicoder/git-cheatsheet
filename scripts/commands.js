var commands = [

  { left: "workspace", right: "index", direction: "status",
    cmd: "status",
    tags: 'Basic Snapshotting',
    docs: "显示在工作目录中与本地版本库最新版本不同的(文件)路径、与 index 不同的(文件)路径以及未加入 git 的(文件)路径。" },
  { left: "workspace", right: "index", direction: "status",
    cmd: "diff",
    tags: 'Basic Snapshotting, Inspection and Comparison,Patching',
    docs: "显示未加入 index 的修改内容" },
  { left: "workspace", right: "local_repo", direction: "status",
    cmd: "diff <commit or branch>",
    tags: 'Basic Snapshotting,Inspection and Comparison,Patching',
    docs: "将当前工作目录与指定的 <commit> 进行比较。可以使用「HEAD」来指定与最新版本进行比较；也可以使用分支的名称，与另外一个分支进行比较。" },

  { left: "workspace", right: "index", direction: "up",
    cmd: "add <file... or dir...>",
    tags: 'Basic Snapshotting',
    docs: "将工作目录中的新文件或修改的文件添加到 index，以供稍后提交至版本库。使用「add --interactive」可以交互式地添加文件。" },
  { left: "workspace", right: "index", direction: "up",
    cmd: "add -u",
    tags: 'Basic Snapshotting',
    docs: "将工作目录中有修改的文件（不包含新文件）添加至 index。相当于在提交时使用「git commit -a」命令所添加的文件。"},
  { left: "workspace", right: "index", direction: "up",
    cmd: "rm <file...>",
    tags: 'Basic Snapshotting',
    docs: "从工作目录和 index 中移除指定文件。" },
  { left: "workspace", right: "index", direction: "up",
    cmd: "mv <file...>",
    tags: 'Basic Snapshotting',
    docs: "在工作目录和 index 中移动指定文件。" },

  { left: "workspace", right: "local_repo", direction: "up",
    cmd: "commit -a -m 'msg'",
    tags: 'Basic Snapshotting',
    docs: "提交所有自上次提交以来修改过的文件（不包括未加入 git 追踪的文件）并从 index 中移除工作目录里已经删除的文件。" },

  { left: "workspace", right: "index", direction: "dn",
    cmd: "checkout <file...> or <dir...>",
    tags: 'Branching and Merging',
    docs: "更新工作目录中的指定文件或目录，覆盖所有本地修改。『不』切换分支。" },

  { left: "index", right: "index", direction: "status",
    cmd: "reset HEAD <file1> <file2> ...",
    tags: 'Basic Snapshotting',
    docs: "将指定文件从预备下次提交的快照中移除（不影响工作目录下正在进行的修改）。" },

  { left: "index", right: "local_repo", direction: "dn",
    cmd: "reset --soft HEAD^",
    tags: 'Basic Snapshotting',
    docs: "撤销上次提交，将其内容放入 index 快照。" },

  { left: "workspace", right: "local_repo", direction: "dn",
    cmd: "reset --hard",
    tags: 'Basic Snapshotting',
    docs: "清空工作目录中的所有修改和 index 快照，与本地版本库同步。" +
          "警告：工作目录中所有未提交的修改都将丢失。通常用于合并冲突而打算重新开始的情况。添加「ORIG_HEAD」参数可以撤销最近一次合并操作及之后的所有改动。" },

  { left: "workspace", right: "local_repo", direction: "dn",
    cmd: "checkout <branch>",
    tags: 'Branching and Merging',
    docs: "更新 index 和工作目录以切换到指定分支，并且更新 HEAD 到此分支。" },
  { left: "workspace", right: "local_repo", direction: "dn",
    cmd: "checkout -b <name of new branch>",
    tags: 'Branching and Merging',
    docs: "创建并切换到一个新的分支。" },

  { left: "workspace", right: "local_repo", direction: "dn",
    cmd: "merge <commit or branch>",
    tags: 'Branching and Merging',
    docs: "将 <branch name> 中的内容合并到当前分支。使用 --no-commit 参数可以防止合并之后自动提交，以便审查合并结果之后再进行提交。" },

  { left: "workspace", right: "local_repo", direction: "dn",
    cmd: "rebase <upstream>",
    tags: 'Patching',
    docs: "撤销自从 <upstream> 分支以来的所有修改提交（commit），然后将这些提交逐个应用于 <upstream> 的 HEAD 上。" },

  { left: "workspace", right: "local_repo", direction: "dn",
    cmd: "cherry-pick <sha>",
    tags: 'Patching',
    docs: "将指定 commit 中的修改合并到当前分支。" },
  { left: "workspace", right: "local_repo", direction: "dn",
    cmd: "revert <sha>",
    docs: "撤销 <sha> 中的修改内容并将结果提交。此项操作需要工作目录中干净无修改。" },

  { left: "index", right: "local_repo", direction: "status",
    cmd: "diff --cached [<commit>]",
    tags: 'Basic Snapshotting,Inspection and Comparison,Patching',
    docs: "查看 index 中的修改内容和最新提交的区别。也可以指定某个提交进行比较。"},
  { left: "index", right: "local_repo", direction: "up",
    cmd: "commit -m 'msg'",
    tags: 'Basic Snapshotting',
    docs: "将 index 中的修改内容提交，并附上对此次修改的描述。" },
  { left: "index", right: "local_repo", direction: "up",
    cmd: "commit --amend",
    tags: 'Basic Snapshotting',
    docs: '将当前 index 中的修改内容合并到上一次提交中。'},

  { left: "local_repo", right: "local_repo", direction: "status",
    cmd: "log",
    tags: 'Branching and Merging, Inspection and Comparison',
    docs: '查看提交历史记录，最新的排在最顶端。选项：' +
          '--decorate    将分支以及标签信息显示在相应的提交旁边' +
          '--stat        包含文件的增删改信息' +
          '--author=foo  只显示指定作者的提交' +
          '--after="MMM DD YYYY" 如 "Jun 20 2008"，只显示某个日期之后的提交' +
          '--before="MMM DD YYYY" 只显示某个日期之前的提交' +
          '--merge       只显示跟当前合并冲突有关的提交' },
  { left: "local_repo", right: "local_repo", direction: "status",
    cmd: "diff <commit> <commit>",
    tags: 'Basic Snapshotting, Inspection and Comparison,Patching',
    docs: "查看任意两次提交之间的区别。" },
  { left: "local_repo", right: "local_repo", direction: "status",
    cmd: "branch",
    tags: 'Branching and Merging',
    docs: "列出所有分支。选项 -r 指定查看远端的分支，选项 -a 则同时查看远端和本地所有分支。" },
  { left: "local_repo", right: "local_repo", direction: "status",
    cmd: "branch -d <branch>",
    tags: 'Branching and Merging',
    docs: "删除指定分支。使用 -D 选项则强制删除。" },
  { left: 'local_repo', right: 'remote_repo', direction: 'dn',
    cmd: "branch --track <new> <remote/branch>",
    tags: 'Branching and Merging',
    docs: '创建一个映射到指定远端分支的本地分支。'},

  { left: "workspace", right: "remote_repo", direction: "dn",
    cmd: "clone <repo>",
    tags: 'Creating Projects',
    docs: "下载 <repo> 指定的仓库，并将工作目录签出为 master 分支的最新版本。" },
  { left: "workspace", right: "remote_repo", direction: "dn",
    cmd: "pull <remote> <refspec>",
    tags: 'Sharing and Updating',
    docs: "获取远端仓库中的指定版本，并将其合并到当前分支。" },
  { left: "workspace", right: "remote_repo", direction: "dn",
    cmd: "reset --hard <remote>/<branch>",
    tags: 'Basic Snapshotting',
    docs: "将本地工作目录重置为远端分支版本。使用 'reset --hard origin/master' 会抛弃所有本地 master 分支上的提交，可以用于合并失败时重新开始。" },
  { left: "local_repo", right: "remote_repo", direction: "dn",
    cmd: "fetch <remote> <refspec>",
    tags: 'Sharing and Updating',
    docs: "从远端仓库下载所有内容（包括分支和标签）。" },
  { left: "local_repo", right: "remote_repo", direction: "up",
    cmd: "push",
    tags: 'Sharing and Updating',
    docs: '将所有本地分支的修改推送到远端仓库上的相应分支，但不包括那些从未推送到远端仓库过的分支。'},
  { left: "local_repo", right: "remote_repo", direction: "up",
    cmd: "push <remote> <branch>",
    tags: 'Sharing and Updating',
    docs: "将一个新的（或现有）分支推送到远端仓库" },
  { left: "local_repo", right: "remote_repo", direction: "up",
    cmd: "push <remote> <branch>:<branch>",
    tags: 'Sharing and Updating',
    docs: "将一个新的（或现有）分支推送到远端仓库的不同名分支上。" },

  { left: "remote_repo", right: "remote_repo", direction: "status",
    cmd: "branch -r",
    tags: 'Branching and Merging',
    docs: "列出远端仓库的所有分支。" },

  { left: "remote_repo", right: "remote_repo", direction: "status",
    cmd: "push <remote> :<branch>",
    tags: 'Sharing and Updating',
    docs: "删除远端仓库的指定分支。" },

  { left: "workspace", right: "workspace", direction: "dn",
    cmd: "clean",
    tags: 'Administration',
    docs: '清除当前目录以及所有层级子目录中未加入版本控制的文件。' },

  { left: "stash", right: "workspace", direction: "dn",
    cmd: "stash save [<msg>]",
    tags: 'Branching and Merging',
    docs: '将目前的修改内容保存到一个新的 stash 中。运行 "git reset --hard" 可以清除之。 ' +
        '<message> 是可选的，事实上如果只想立刻做个快照的话 "save" 也可以省略。' },
  { left: "stash", right: "workspace", direction: "up",
    cmd: "stash apply [<name>]",
    tags: 'Branching and Merging',
    docs: "从指定的 stash 记录中恢复修改到当前工作目录。默认使用最后一次保存的 stash 记录。" },
  { left: "stash", right: "workspace", direction: "up",
    cmd: "stash pop",
    tags: 'Branching and Merging',
    docs: '应用最后一次保存的（或指定的） stash 记录并删除 stash 对它的记录。'},
  { left: "stash", right: "stash", direction: "status",
    cmd: "stash list",
    tags: 'Branching and Merging',
    docs: "列出目前所有保存的 stash 记录。" },
  { left: "stash", right: "stash", direction: "status",
    cmd: "stash show [<stash>]",
    tags: 'Branching and Merging',
    docs: "以 diff 显示指定 stash 记录中记录的修改内容。未指定 <stash> 的话则采用最后一条 stash 记录。" },
  { left: "stash", right: "stash", direction: "status",
    cmd: "stash drop [<name>]",
    tags: 'Branching and Merging',
    docs: "删除 stash 列表中的一条记录。未指定 <stash> 的话则删除最新一条。" },
  { left: "stash", right: "stash", direction: "status",
    cmd: "stash clear",
    tags: 'Branching and Merging',
    docs: "清除所有 stash 记录。此项操作不可逆。" },
  { left: "stash", right: "local_repo", direction: "up",
    cmd: "stash branch <branchname> [<stash>]",
    tags: 'Branching and Merging',
    docs: '根据指定的 stash 记录创建一个新的分支，新的分支起点为创建该 stash 记录时所在的提交，并将该 stash 记录中的修改内容应用于' +
        '工作目录和 index。如果操作成功并且 <stash> 的格式为 stash@{<revision>}，则一并删除此 stash 记录。' +
        '未指定 <stash> 的话则采用最新一条记录。\r' +
        '当你在某个分之上执行了 stash save 之后此分支进行了太多修改提交导致严重冲突无法合并回去的时候，这条命令就非常有用了。' +
        '因为新的恢复操作会应用在创建 stash 记录时的提交基础上，所以不会产生任何冲突。' }

];